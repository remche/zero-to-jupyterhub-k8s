title: Config
type: object
properties:
  fullnameOverride:
    type:
      - string
      - "null"
    description: |
      fullnameOverride and nameOverride allow you to adjust how the resources
      part of the Helm chart are named.

      Name format               | Resource types | fullnameOverride | nameOverride | Note
      -                         | -              | -                | -            | -
      component                 | namespaced     | `""`             | *            | Default
      release-component         | cluster wide   | `""`             | *            | Default
      fullname-component        | *              | str              | *            | -
      release-component         | *              | null             | `""`         | -
      release-(name-)component  | *              | null             | str          | omitted if contained in release
      release-(chart-)component | *              | null             | null         | omitted if contained in release

      ```{admonition} Warning!
      :class: warning
      Changing fullnameOverride or nameOverride after the initial installation
      of the chart isn't supported. Changing their values likely leads to a
      reset of non-external JupyterHub databases, abandonment of users' storage,
      and severed couplings to currently running user pods.
      ```

      If you are a developer of a chart depending on this chart, you should
      avoid hardcoding names. If you want to reference the name of a resource in
      this chart from a parent helm chart's template, you can make use of the
      global named templates instead.

      ```yaml
      # some pod definition of a parent chart helm template
      schedulerName: {{ include "jupyterhub.user-scheduler.fullname" . }}
      ```

      To access them from a container, you can also rely on the hub ConfigMap
      that contains entries of all the resource names.

      ```yaml
      # some container definition in a parent chart helm template
      env:
        - name: SCHEDULER_NAME
          valueFrom:
            configMapKeyRef:
              name: {{ include "jupyterhub.user-scheduler.fullname" . }}
              key: user-scheduler
      ```
  nameOverride:
    type:
      - string
      - "null"
    description: |
      See the documentation under [`fullnameOverride`](schema_fullnameOverride).
  imagePullSecret:
    type: object
    description: |
      This is configuration to create a k8s Secret resource of `type:
      kubernetes.io/dockerconfigjson`, with credentials to pull images from a
      private image registry. If you opt to do so, it will be available for use
      by all pods in their respective `spec.imagePullSecrets` alongside other
      k8s Secrets defined in `imagePullSecrets` or the pod respective
      `...image.pullSecrets` configuration.

      In other words, using this configuration option can automate both the
      otherwise manual creation of a k8s Secret and the otherwise manual
      configuration to reference this k8s Secret in all the pods of the Helm
      chart.

      ```sh
      # you won't need to create a k8s Secret manually...
      kubectl create secret docker-registry image-pull-secret \
        --docker-server=<REGISTRY> \
        --docker-username=<USERNAME> \
        --docker-email=<EMAIL> \
        --docker-password=<PASSWORD>
      ```

      If you just want to let all Pods reference an existing secret, use the
      `imagePullSecrets` configuration instead.

      To learn the username and password fields to access a gcr.io registry from
      a Kubernetes cluster not associated with the same google cloud
      credentials, look into [this
      guide](http://docs.heptio.com/content/private-registries/pr-gcr.html) and
      read the notes about the password.
    properties:
      create:
        type: boolean
        description: |
          Toggle the creation of the k8s Secret with provided credentials to
          access a private image registry.
      automaticReferenceInjection:
        type: boolean
        description: |
          Toggle the automatic reference injection of the created Secret to all
          pods' `spec.imagePullSecrets` configuration.
      registry:
        type:
          - string
          - "null"
        description: |
          Name of the private registry you want to create a credential set for.
          It will default to Docker Hub's image registry.

          Examples:
            - https://index.docker.io/v1/
            - quay.io
            - eu.gcr.io
            - alexmorreale.privatereg.net
      username:
        type:
          - string
          - "null"
        description: |
          Name of the user you want to use to connect to your private registry.

          For external gcr.io, you will use the `_json_key`.

          Examples:
            - alexmorreale
            - alex@pfc.com
            - _json_key
      password:
        type:
          - string
          - "null"
        description: |
          Password for the private image registry's user.

          Examples:
            - plaintextpassword
            - abc123SECRETzyx098

          For gcr.io registries the password will be a big JSON blob for a
          Google cloud service account, it should look something like below.

          ```yaml
          password: |-
            {
              "type": "service_account",
              "project_id": "jupyter-se",
              "private_key_id": "f2ba09118a8d3123b3321bd9a7d6d0d9dc6fdb85",
              ...
            }
          ```

          Learn more in [this
          guide](http://docs.heptio.com/content/private-registries/pr-gcr.html).
  imagePullSecrets:
    type: array
    description: |
      Chart wide configuration to _append_ k8s Secret references to all its
      pod's `spec.imagePullSecrets` configuration.

      This will not override or get overridden by pod specific configuration,
      but instead augment the pod specific configuration.

      You can use both the k8s native syntax, where each list element is like
      `{"name": "my-secret-name"}`, or you can let list elements be strings
      naming the secrets directly.
  hub:
    type: object
    properties:
      config:
        type: object
        description: |
          JupyterHub and its components (authenticators, spawners, etc), are
          Python classes that expose its configuration through
          [_traitlets_](https://traitlets.readthedocs.io/en/stable/). With this
          Helm chart configuration (`hub.config`), you can directly configure
          the Python classes through _static_ YAML values. To _dynamically_ set
          values, you need to use [`hub.extraConfig`](schema_hub.extraConfig)
          instead.

          ```{admonition} Currently intended only for auth config
          :class: warning
          This config _currently_ (0.11.0) only influence the software in the
          `hub` Pod, but some Helm chart config options such as
          [`hub.baseUrl`](schema_hub.baseUrl) is used to set
          `JupyterHub.base_url` in the `hub` Pod _and_ influence how other Helm
          templates are rendered.

          As we have not yet mapped out all the potential configuration
          conflicts except for the authentication related configuration options,
          please accept that using it for something else at this point can lead
          to issues.
          ```

          __Example__

          If you inspect documentation or some `jupyterhub_config.py` to contain
          the following section:

          ```python
          c.JupyterHub.admin_access = true
          c.JupyterHub.admin_users = ["jovyan1", "jovyan2"]
          ```

          Then, you would be able to represent it with this configuration like:

          ```yaml
          hub:
            config:
              JupyterHub:
                admin_access: true
                admin_users:
                  - jovyan1
                  - jovyan2
          ```

          ```{admonition} YAML limitations
          :class: tip
          You can't represent Python `Bytes` or `Set` objects in YAML directly.
          ```

          ```{admonition} Helm value merging
          :class: tip
          `helm` merges a Helm chart's default values with values passed with
          the `--values` or `-f` flag. During merging, lists are replaced while
          dictionaries are updated.
          ```
      extraFiles: &extraFiles
        type: object
        description: |
          A dictionary with extra files to be injected into the pod's container
          on startup. This can for example be used to inject: configuration
          files, custom user interface templates, images, and more.

          ```yaml
          hub:
            extraFiles:
              # The file key is just a reference that doesn't influence the
              # actual file name.
              <file key>:
                # mountPath is required and must be the absolute file path.
                mountPath: <full file path>

                # Choose one out of the three ways to represent the actual file
                # content: data, stringData, or binaryData.
                #
                # data should be set to a mapping (dictionary). It will in the
                # end be rendered to either YAML, JSON, or TOML based on the
                # filename extension that are required to be either .yaml, .yml,
                # .json, or .toml.
                #
                # If your content is YAML, JSON, or TOML, it can make sense to
                # use data to represent it over stringData as data can be merged
                # instead of replaced if set partially from separate Helm
                # configuration files.
                #
                # Both stringData and binaryData should be set to a string
                # representing the content, where binaryData should be the
                # base64 encoding of the actual file content.
                #
                data:
                  config:
                    map:
                      number: 123
                      string: "hi"
                    list:
                      - 1
                      - 2
                stringData: |
                  hello world!
                binaryData: aGVsbG8gd29ybGQhCg==

                # mode is by default 0644 and you can optionally override it
                # either by octal notation (example: 0400) or decimal notation
                # (example: 256).
                mode: <file system permissions>
          ```

          **Using --set-file**

          To avoid embedding entire files in the Helm chart configuration, you
          can use the `--set-file` flag during `helm upgrade` to set the
          stringData or binaryData field.

          ```yaml
          hub:
            extraFiles:
              my_image:
                mountPath: /usr/local/share/jupyterhub/static/my_image.png

              # Files in /usr/local/etc/jupyterhub/jupyterhub_config.d are
              # automatically loaded in alphabetical order of the final file
              # name when JupyterHub starts.
              my_config:
                mountPath: /usr/local/etc/jupyterhub/jupyterhub_config.d/my_jupyterhub_config.py
          ```

          ```bash
          # --set-file expects a text based file, so you need to base64 encode
          # it manually first.
          base64 my_image.png > my_image.png.b64

          helm upgrade <...> \
              --set-file hub.extraFiles.my_image.binaryData=./my_image.png.b64 \
              --set-file hub.extraFiles.my_config.stringData=./my_jupyterhub_config.py
          ```

          **Common uses**

          1. **JupyterHub template customization**

             You can replace the default JupyterHub user interface templates in
             the hub pod by injecting new ones to
             `/usr/local/share/jupyterhub/templates`. These can in turn
             reference custom images injected to
             `/usr/local/share/jupyterhub/static`.

          1. **JupyterHub standalone file config**

             Instead of embedding JupyterHub python configuration as a string
             within a YAML file through
             [`hub.extraConfig`](schema_hub.extraConfig), you can inject a
             standalone .py file into
             `/usr/local/etc/jupyterhub/jupyterhub_config.d` that is
             automatically loaded.

          1. **Flexible configuration**

             By injecting files, you don't have to embed them in a docker image
             that you have to rebuild.

             If your configuration file is a YAML/JSON/TOML file, you can also
             use `data` instead of `stringData` which allow you to set various
             configuration in separate Helm config files. This can be useful to
             help dependent charts override only some configuration part of the
             file, or to allow for the configuration be set through multiple
             Helm configuration files.

          **Limitations**

          1. File size

             The files in `hub.extraFiles` and `singleuser.extraFiles` are
             respectively stored in their own k8s Secret resource. As k8s
             Secret's are limited, typically to 1MB, you will be limited to a
             total file size of less than 1MB as there is also base64 encoding
             that takes place reducing available capacity to 75%.

          2. File updates

             The files that are mounted are only set during container startup.
             This is [because we use
             `subPath`](https://kubernetes.io/docs/concepts/storage/volumes/#secret)
             as is required to avoid replacing the content of the entire
             directory we mount in.

      baseUrl:
        type:
          - string
          - "null"
        description: |
          This is the equivalent of c.JupyterHub.base_url, but it is also needed
          by the Helm chart in general. So, instead of setting
          c.JupyterHub.base_url, use this configuration.
      command:
        type: array
        description: |
          A list of strings to be used to replace the JupyterHub image's
          `ENTRYPOINT` entry. Note that in k8s lingo, the Dockerfile's
          `ENTRYPOINT` is called `command`. The list of strings will be expanded
          with Helm's template function `tpl` which can render Helm template
          logic inside curly braces (`{{... }}`).

          This could be useful to wrap the invocation of JupyterHub itself in
          some custom way.

          For more details, see the [Kubernetes
          documentation](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes).
      args:
        type: array
        description: |
          A list of strings to be used to replace the JupyterHub image's `CMD`
          entry as well as the Helm chart's default way to start JupyterHub.
          Note that in k8s lingo, the Dockerfile's `CMD` is called `args`. The
          list of strings will be expanded with Helm's template function `tpl`
          which can render Helm template logic inside curly braces (`{{... }}`).

          ```{warning}
          By replacing the entire configuration file, which is mounted to
          `/usr/local/etc/jupyterhub/jupyterhub_config.py` by the Helm chart,
          instead of appending to it with `hub.extraConfig`, you expose your
          deployment for issues stemming from getting out of sync with the Helm
          chart's config file.

          These kind of issues will be significantly harder to debug and
          diagnose, and can due to this could cause a lot of time expenditure
          for both the community maintaining the Helm chart as well as yourself,
          even if this wasn't the reason for the issue.

          Due to this, we ask that you do your _absolute best to avoid replacing
          the default provided `jupyterhub_config.py` file. It can often be
          possible. For example, if your goal is to have a dedicated .py file
          for more extensive additions that you can syntax highlight and such
          and feel limited by passing code in `hub.extraConfig` which is part of
          a YAML file, you can use [this
          trick](https://github.com/jupyterhub/zero-to-jupyterhub-k8s/issues/1580#issuecomment-707776237)
          instead.
          ```

          ```yaml
          hub:
            args:
              - "jupyterhub"
              - "--config"
              - "/usr/local/etc/jupyterhub/jupyterhub_config.py"
              - "--debug"
              - "--upgrade-db"
          ```

          For more details, see the [Kubernetes
          documentation](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes).
      cookieSecret:
        type:
          - string
          - "null"
        description: |
          ```{note}
          As of version 1.0.0 this will automatically be generated and there is
          no need to set it manually.
          ```

          A 32-byte cryptographically secure randomly generated string used to sign values of
          secure cookies set by the hub. If unset, jupyterhub will generate one on startup and
          save it in the file `jupyterhub_cookie_secret` in the `/srv/jupyterhub` directory of
          the hub container. A value set here will make JupyterHub overwrite any previous file.

          You do not need to set this at all if you are using the default configuration for
          storing databases - sqlite on a persistent volume (with `hub.db.type` set to the
          default `sqlite-pvc`). If you are using an external database, then you must set this
          value explicitly - or your users will keep getting logged out each time the hub pod
          restarts.

          Changing this value will all user logins to be invalidated. If this secret leaks,
          *immediately* change it to something else, or user data can be compromised

          ```sh
          # to generate a value, run
          openssl rand -hex 32
          ```
      image: &image-spec
        type: object
        description: |
          Set custom image name, tag, pullPolicy, or pullSecrets for the pod.
        properties:
          name:
            type:
              - string
              - "null"
            description: |
              The name of the image, without the tag.

              ```
              # example name
              gcr.io/my-project/my-image
              ```
          tag:
            type:
              - string
              - "null"
            description: |
              The tag of the image to pull. This is the value following `:` in
              complete image specifications.

              ```
              # example tags
              v1.11.1
              zhy270a
              ```
          pullPolicy:
            type:
              - string
              - "null"
            enum:
              - ""
              - IfNotPresent
              - Always
              - Never
            description: |
              Configures the Pod's `spec.imagePullPolicy`.

              See the [Kubernetes docs](https://kubernetes.io/docs/concepts/containers/images/#updating-images)
              for more info.
          pullSecrets:
            type: array
            description: |
              A list of references to existing Kubernetes Secrets with
              credentials to pull the image.

              This Pod's final `imagePullSecrets` k8s specification will be a
              combination of:

              1. This list of k8s Secrets, specific for this pod.
              2. The list of k8s Secrets, for use by all pods in the Helm chart,
                 declared in this Helm charts configuration called
                 `imagePullSecrets`.
              3. A k8s Secret, for use by all pods in the Helm chart, if
                 conditionally created from image registry credentials provided
                 under `imagePullSecret` if `imagePullSecret.create` is set to
                 true.

              ```yaml
              # example - k8s native syntax
              pullSecrets:
                - name: my-k8s-secret-with-image-registry-credentials

              # example - simplified syntax
              pullSecrets:
                - my-k8s-secret-with-image-registry-credentials
              ```
      networkPolicy: &networkPolicy-spec
        type: object
        description: |
          This configuration regards the creation and configuration of a k8s
          _NetworkPolicy resource_.
        properties:
          enabled:
            type: boolean
            description: |
              Toggle the creation of the NetworkPolicy resource for this pod.
          ingress:
            type: array
            description: |
              Additional ingress rules to add except those that is known to be needed by the respective pods in the Helm chart.
          egress:
            type: array
            description: |
              Additional egress rules to add except those that is known to be needed by  the respective pods in the Helm chart.

              The default value of this egress is to allow all traffic, except for the `singleuser.networkPolicy.egress`, which is also limiting access to a metadata server that can be exploited.

              If you want to restrict egress, you can override this permissive default to be an empty list.
          interNamespaceAccessLabels:
            type:
              - string
              - "null"
            enum:
              - accept
              - ignore
            description: |
              This configuration option determines if both namespaces and pods
              in other namespaces, that have specific access labels, should be
              accepted to allow ingress (set to `accept`), or, if the labels are
              to be ignored when applied outside the local namespace (set to
              `ignore`).

              The available access labels for respective NetworkPolicy resources
              are:

              - `hub.jupyter.org/network-access-hub: "true"` (hub)
              - `hub.jupyter.org/network-access-proxy-http: "true"` (proxy.chp, proxy.traefik)
              - `hub.jupyter.org/network-access-proxy-api: "true"` (proxy.chp)
              - `hub.jupyter.org/network-access-singleuser: "true"` (singleuser)
          allowedIngressPorts:
            type: array
            description: |
              A rule to allow ingress on these ports will be added no matter
              what the origin of the request is. The default setting for
              `proxy.chp` and `proxy.traefik`'s networkPolicy configuration is
              `[http, https]`, while it is `[]` for other networkPolicies.

              Note that these port names or numbers target a Pod's port name or
              number, not a k8s Service's port name or number.
      db:
        type: object
        properties:
          type:
            type:
              - string
              - "null"
            enum:
              - sqlite-pvc
              - sqlite-memory
              - mysql
              - postgres
            description: |
              Type of database backend to use for the hub database.

              The Hub requires a persistent database to function, and this lets you specify
              where it should be stored.

              The various options are:

              1. **sqlite-pvc**

                 Use an `sqlite` database kept on a persistent volume attached to the hub.

                 By default, this disk is created by the cloud provider using
                 *dynamic provisioning* configured by a [storage
                 class](https://kubernetes.io/docs/concepts/storage/storage-classes/).
                 You can customize how this disk is created / attached by
                 setting various properties under `hub.db.pvc`.

                 This is the default setting, and should work well for most cloud provider
                 deployments.

              2. **sqlite-memory**

                 Use an in-memory `sqlite` database. This should only be used for testing,
                 since the database is erased whenever the hub pod restarts - causing the hub
                 to lose all memory of users who had logged in before.

                 When using this for testing, make sure you delete all other objects that the
                 hub has created (such as user pods, user PVCs, etc) every time the hub restarts.
                 Otherwise you might run into errors about duplicate resources.

              3. **mysql**

                 Use an externally hosted mysql database.

                 You have to specify an sqlalchemy connection string for the mysql database you
                 want to connect to in `hub.db.url` if using this option.

                 The general format of the connection string is:
                 ```
                 mysql+pymysql://<db-username>:<db-password>@<db-hostname>:<db-port>/<db-name>
                 ```

                 The user specified in the connection string must have the rights to create
                 tables in the database specified.

              4. **postgres**

                 Use an externally hosted postgres database.

                 You have to specify an sqlalchemy connection string for the postgres database you
                 want to connect to in `hub.db.url` if using this option.

                 The general format of the connection string is:
                 ```
                 postgres+psycopg2://<db-username>:<db-password>@<db-hostname>:<db-port>/<db-name>
                 ```

                 The user specified in the connection string must have the rights to create
                 tables in the database specified.
          pvc:
            type: object
            description: |
              Customize the Persistent Volume Claim used when `hub.db.type` is `sqlite-pvc`.
            properties:
              annotations:
                type: object
                description: |
                  Annotations to apply to the PVC containing the sqlite database.

                  See [the Kubernetes
                  documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/)
                  for more details about annotations.
              selector:
                type: object
                description: |
                  Label selectors to set for the PVC containing the sqlite database.

                  Useful when you are using a specific PV, and want to bind to
                  that and only that.

                  See [the Kubernetes
                  documentation](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims)
                  for more details about using a label selector for what PV to
                  bind to.
              storage:
                type:
                  - string
                  - "null"
                description: |
                  Size of disk to request for the database disk.
          url:
            type:
              - string
              - "null"
            description: |
              Connection string when `hub.db.type` is mysql or postgres.

              See documentation for `hub.db.type` for more details on the format of this property.
          password:
            type:
              - string
              - "null"
            description: |
              Password for the database when `hub.db.type` is mysql or postgres.
      labels:
        type: object
        description: |
          Extra labels to add to the hub pod.

          See the [Kubernetes docs](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)
          to learn more about labels.
      initContainers:
        type: array
        description: |
          list of initContainers to be run with hub pod. See [Kubernetes Docs](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)

          ```yaml
          hub:
            initContainers:
              - name: init-myservice
                image: busybox:1.28
                command: ['sh', '-c', 'command1']
              - name: init-mydb
                image: busybox:1.28
                command: ['sh', '-c', 'command2']
          ```
      extraEnv:
        type: object
        description: |
          Extra environment variables that should be set for the hub pod.

          Environment variables are usually used to:
            - Pass parameters to some custom code in `hub.extraConfig`.
            - Configure code running in the hub pod, such as an authenticator or
              spawner.

          String literals with `$(ENV_VAR_NAME)` will be expanded by Kubelet which
          is a part of Kubernetes.

          ```yaml
          hub:
            extraEnv:
              # basic notation (for literal values only)
              MY_ENV_VARS_NAME1: "my env var value 1"

              # explicit notation (the "name" field takes precedence)
              HUB_NAMESPACE:
                name: HUB_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace

              # implicit notation (the "name" field is implied)
              PREFIXED_HUB_NAMESPACE:
                value: "my-prefix-$(HUB_NAMESPACE)"
              SECRET_VALUE:
                valueFrom:
                  secretKeyRef:
                    name: my-k8s-secret
                    key: password
          ```

          For more information, see the [Kubernetes EnvVar
          specification](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#envvar-v1-core).
      extraConfig:
        type: object
        description: |
          Arbitrary extra python based configuration that should be in `jupyterhub_config.py`.

          This is the *escape hatch* - if you want to configure JupyterHub to do something specific
          that is not present here as an option, you can write the raw Python to do it here.

          extraConfig is a *dict*, so there can be multiple configuration snippets
          under different names.
          The configuration sections are run in alphabetical order.

          Non-exhaustive examples of things you can do here:
            - Subclass authenticator / spawner to do a custom thing
            - Dynamically launch different images for different sets of images
            - Inject an auth token from GitHub authenticator into user pod
            - Anything else you can think of!

          Since this is usually a multi-line string, you want to format it using YAML's
          [| operator](https://yaml.org/spec/1.2/spec.html#id2795688).

          For example:
            ```yaml
            hub:
              extraConfig:
                myConfig.py: |
                  c.JupyterHub.something = 'something'
                  c.Spawner.somethingelse = 'something else'
            ```

          No validation of this python is performed! If you make a mistake here, it will probably
          manifest as either the hub pod going into `Error` or `CrashLoopBackoff` states, or in
          some special cases, the hub running but... just doing very random things. Be careful!
      uid:
        type: integer
        minimum: 0
        description: The UID the hub process should be running as.

          Use this only if you are building your own image & know that a user with this uid
          exists inside the hub container! Advanced feature, handle with care!

          Defaults to 1000, which is the uid of the `jovyan` user that is present in the
          default hub image.
      fsGid:
        type: integer
        minimum: 0
        description:
          The gid the hub process should be using when touching any volumes mounted.

          Use this only if you are building your own image & know that a group with this gid
          exists inside the hub container! Advanced feature, handle with care!

          Defaults to 1000, which is the gid of the `jovyan` user that is present in the
          default hub image.
      service:
        type: object
        description: |
          Object to configure the service the JupyterHub will be exposed on by the Kubernetes server.
        properties:
          type:
            type:
              - string
              - "null"
            enum:
              - ClusterIP
              - NodePort
              - LoadBalancer
              - ExternalName
            description: |
              The Kubernetes ServiceType to be used.

              The default type is `ClusterIP`.
              See the [Kubernetes docs](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types)
              to learn more about service types.
          ports:
            type: object
            description: |
              Object to configure the ports the hub service will be deployed on.
            properties:
              nodePort:
                type:
                  - integer
                  - "null"
                description: |
                  The nodePort to deploy the hub service on.
          annotations:
            type: object
            description: |
              Kubernetes annotations to apply to the hub service.
      pdb: &pdb-spec
        type: object
        description: |
          Configure a PodDisruptionBudget for this Deployment.

          These are disabled by default for our deployments that don't support
          being run in parallel with multiple replicas. Only the user-scheduler
          currently supports being run in parallel with multiple replicas. If
          they are enabled for a Deployment with only one replica, they will
          block `kubectl drain` of a node for example.

          Note that if you aim to block scaling down a node with the
          hub/proxy/autohttps pod that would cause disruptions of the
          deployment, then you should instead annotate the pods of the
          Deployment [as described
          here](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-types-of-pods-can-prevent-ca-from-removing-a-node).

              "cluster-autoscaler.kubernetes.io/safe-to-evict": "false"

          See [the Kubernetes
          documentation](https://kubernetes.io/docs/concepts/workloads/pods/disruptions/)
          for more details about disruptions.
        properties:
          enabled:
            type: boolean
            description: |
              Decides if a PodDisruptionBudget is created targeting the
              Deployment's pods.
          minAvailable:
            type: integer
            description: |
              The minimum number of pods required to be available during
              voluntary disruptions.
      existingSecret:
        type:
          - string
          - "null"
        description: |
          Name of an existing k8s Secret to use instead of the chart managed k8s
          Secret.

          This k8s Secret must represent the structure generated by this chart
          and by using this option, you are in change of ensuring the secret
          structure is reflected when upgrading to new versions of the chart.
      nodeSelector: &nodeSelector-spec
        type: object
        description: |
          An object with key value pairs representing labels. K8s Nodes are
          required to have match all these labels for this Pod to scheduled on
          them.

          ```yaml
          disktype: ssd
          nodetype: awesome
          ```

          See [the Kubernetes
          documentation](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector)
          for more details.
      tolerations: &tolerations-spec
        type: array
        description: |
          Tolerations allow a pod to be scheduled on nodes with taints. These
          are additional tolerations other than the user pods and core pods
          default ones `hub.jupyter.org/dedicated=user:NoSchedule` or
          `hub.jupyter.org/dedicated=core:NoSchedule`. Note that a duplicate set
          of tolerations exist where `/` is replaced with `_` as the Google
          cloud does not support the character `/` yet in the toleration.

          Pass this field an array of
          [`Toleration`](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#toleration-v1-core)
          objects.

          See the [Kubernetes
          docs](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/)
          for more info.

  proxy:
    type: object
    properties:
      chp:
        type: object
        description: |
          Configure the configurable-http-proxy (chp) pod managed by jupyterhub to route traffic
          both to itself and to user pods.
        properties:
          networkPolicy: *networkPolicy-spec
          extraCommandLineFlags:
            type: array
            description: |
              A list of strings to be added as command line options when
              starting
              [configurable-http-proxy](https://github.com/jupyterhub/configurable-http-proxy#command-line-options)
              that will be expanded with Helm's template function `tpl` which
              can render Helm template logic inside curly braces (`{{ ... }}`).

              ```yaml
              proxy:
                chp:
                  extraCommandLineFlags:
                    - "--auto-rewrite"
                    - "--custom-header {{ .Values.myCustomStuff }}"
              ```

              Note that these will be appended last, and if you provide the same
              flag twice, the last flag will be used, which mean you can
              override the default flag values as well.
          extraEnv:
            type: object
            description: |
              Extra environment variables that should be set for the chp pod.

              Environment variables are usually used here to:
                - override HUB_SERVICE_PORT or HUB_SERVICE_HOST default values
                - set CONFIGPROXY_SSL_KEY_PASSPHRASE for setting passphrase of SSL keys

              String literals with `$(ENV_VAR_NAME)` will be expanded by Kubelet which
              is a part of Kubernetes.

              ```yaml
              proxy:
                chp:
                  extraEnv:
                    # basic notation (for literal values only)
                    MY_ENV_VARS_NAME1: "my env var value 1"

                    # explicit notation (the "name" field takes precedence)
                    CHP_NAMESPACE:
                      name: CHP_NAMESPACE
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.namespace

                    # implicit notation (the "name" field is implied)
                    PREFIXED_CHP_NAMESPACE:
                      value: "my-prefix-$(CHP_NAMESPACE)"
                    SECRET_VALUE:
                      valueFrom:
                        secretKeyRef:
                          name: my-k8s-secret
                          key: password
              ```

              For more information, see the [Kubernetes EnvVar
              specification](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#envvar-v1-core).
          pdb: *pdb-spec
          nodeSelector: *nodeSelector-spec
          tolerations: *tolerations-spec
      secretToken:
        type:
          - string
          - "null"
        description: |
          ```{note}
          As of version 1.0.0 this will automatically be generated and there is
          no need to set it manually.
          ```

          A 32-byte cryptographically secure randomly generated string used to secure communications
          between the hub and the configurable-http-proxy.

          ```sh
          # to generate a value, run
          openssl rand -hex 32
          ```

          Changing this value will cause the proxy and hub pods to restart. It is good security
          practice to rotate these values over time. If this secret leaks, *immediately* change
          it to something else, or user data can be compromised.
      service:
        type: object
        description: |
          Configuration of the k8s Service `proxy-public` which either will
          point to the `autohttps` pod running Traefik for TLS termination, or
          the `proxy` pod running ConfigurableHTTPProxy. Incoming traffic from
          users on the internet should always go through this k8s Service.

          When this service targets the `autohttps` pod which then routes to the
          `proxy` pod, a k8s Service named `proxy-http` will be added targeting
          the `proxy` pod and only accepting HTTP traffic on port 80.
        properties:
          type:
            type:
              - string
              - "null"
            enum:
              - ClusterIP
              - NodePort
              - LoadBalancer
              - ExternalName
            description: |
              Default `LoadBalancer`. See `hub.service.type` for supported values.
          labels:
            type: object
            description: |
              Extra labels to add to the proxy service.

              See the [Kubernetes docs](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)
              to learn more about labels.
          annotations:
            type: object
            description: |
              Annotations to apply to the service that is exposing the proxy.

              See [the Kubernetes
              documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/)
              for more details about annotations.
          nodePorts:
            type: object
            description: |
              Object to set NodePorts to expose the service on for http and https.

              See [the Kubernetes
              documentation](https://kubernetes.io/docs/concepts/services-networking/service/#nodeport)
              for more details about NodePorts.
            properties:
              http:
                type:
                  - integer
                  - "null"
                description: |
                  The HTTP port the proxy-public service should be exposed on.
              https:
                type:
                  - integer
                  - "null"
                description: |
                  The HTTPS port the proxy-public service should be exposed on.
          extraPorts:
            type: array
            description: |
              Extra ports the k8s Service should accept incoming traffic on,
              which will be redirected to either the `autohttps` pod (treafik)
              or the `proxy` pod (chp).

              See [the Kubernetes
              documentation](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#serviceport-v1-core)
              for the structure of the items in this list.
          loadBalancerIP:
            type:
              - string
              - "null"
            description: |
              The public IP address the proxy-public Kubernetes service should
              be exposed on. This entry will end up at the configurable proxy
              server that JupyterHub manages, which will direct traffic to user
              pods at the `/user` path and the hub pod at the `/hub` path.

              Set this if you want to use a fixed external IP address instead of
              a dynamically acquired one. This is relevant if you have a domain
              name that you want to point to a specific IP and want to ensure it
              doesn't change.
          loadBalancerSourceRanges:
            type: array
            description: |
              A list of IP CIDR ranges that are allowed to access the load balancer service.
              Defaults to allowing everyone to access it.
      https:
        type: object
        description: |
          Object for customizing the settings for HTTPS used by the JupyterHub's proxy.
          For more information on configuring HTTPS for your JupyterHub, see the [HTTPS section in our security guide](https)
        properties:
          enabled:
            type: boolean
            description: |
              Indicator to set whether HTTPS should be enabled or not on the proxy. Defaults to `true` if the https object is provided.
          type:
            type:
              - string
              - "null"
            enum:
              - letsencrypt
              - manual
              - offload
              - secret
            description: |
              The type of HTTPS encryption that is used.
              Decides on which ports and network policies are used for communication via HTTPS. Setting this to `secret` sets the type to manual HTTPS with a secret that has to be provided in the `https.secret` object.
              Defaults to `letsencrypt`.
          letsencrypt:
            type: object
            properties:
              contactEmail:
                type:
                  - string
                  - "null"
                description: |
                  The contact email to be used for automatically provisioned HTTPS certificates by Let's Encrypt. For more information see [Set up automatic HTTPS](setup-automatic-https).
                  Required for automatic HTTPS.
          manual:
            type: object
            description: |
              Object for providing own certificates for manual HTTPS configuration. To be provided when setting `https.type` to `manual`.
              See [Set up manual HTTPS](setup-manual-https)
            properties:
              key:
                type:
                  - string
                  - "null"
                description: |
                  The RSA private key to be used for HTTPS.
                  To be provided in the form of

                  ```
                  key: |
                    -----BEGIN RSA PRIVATE KEY-----
                    ...
                    -----END RSA PRIVATE KEY-----
                  ```
              cert:
                type:
                  - string
                  - "null"
                description: |
                  The certificate to be used for HTTPS.
                  To be provided in the form of

                  ```
                  cert: |
                    -----BEGIN CERTIFICATE-----
                    ...
                    -----END CERTIFICATE-----
                  ```
          secret:
            type: object
            description: |
              Secret to be provided when setting `https.type` to `secret`.
            properties:
              name:
                type:
                  - string
                  - "null"
                description: |
                  Name of the secret
              key:
                type:
                  - string
                  - "null"
                description: |
                  Path to the private key to be used for HTTPS.
                  Example: `'tls.key'`
              crt:
                type:
                  - string
                  - "null"
                description: |
                  Path to the certificate to be used for HTTPS.
                  Example: `'tls.crt'`
          hosts:
            type: array
            description: |
              You domain in list form.
              Required for automatic HTTPS. See [Set up automatic HTTPS](setup-automatic-https).
              To be provided like:
              ```
              hosts:
                - <your-domain-name>
              ```
      traefik:
        type: object
        description: |
          Configure the traefik proxy used to terminate TLS when 'autohttps' is enabled
        properties:
          labels:
            type: object
            description: |
              Extra labels to add to the traefik pod.

              See the [Kubernetes docs](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)
              to learn more about labels.
          networkPolicy: *networkPolicy-spec
          extraEnv:
            type: object
            description: |
              Extra environment variables that should be set for the traefik pod.

              Environment Variables here may be used to configure traefik.

              String literals with `$(ENV_VAR_NAME)` will be expanded by Kubelet which
              is a part of Kubernetes.

              ```yaml
              proxy:
                traefik:
                  extraEnv:
                    # basic notation (for literal values only)
                    MY_ENV_VARS_NAME1: "my env var value 1"

                    # explicit notation (the "name" field takes precedence)
                    TRAEFIK_NAMESPACE:
                      name: TRAEFIK_NAMESPACE
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.namespace

                    # implicit notation (the "name" field is implied)
                    PREFIXED_TRAEFIK_NAMESPACE:
                      value: "my-prefix-$(TRAEFIK_NAMESPACE)"
                    SECRET_VALUE:
                      valueFrom:
                        secretKeyRef:
                          name: my-k8s-secret
                          key: password
              ```

              For more information, see the [Kubernetes EnvVar
              specification](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#envvar-v1-core).
          pdb: *pdb-spec
          nodeSelector: *nodeSelector-spec
          tolerations: *tolerations-spec
    required:
      - secretToken

  singleuser:
    type: object
    description: |
      Options for customizing the environment that is provided to the users after they log in.
    properties:
      networkPolicy: *networkPolicy-spec
      podNameTemplate:
        type:
          - string
          - "null"
        description: |
          Template for the pod name of each user, such as `jupyter-{username}{servername}`.
      cpu:
        type: object
        description: |
          Set CPU limits & guarantees that are enforced for each user.
          See: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        properties:
          limit:
            type:
              - string
              - "null"
          guarantee:
            type:
              - string
              - "null"
      memory:
        type: object
        description: |
          Set Memory limits & guarantees that are enforced for each user.

          See the [Kubernetes docs](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
          for more info.
        properties:
          limit:
            type:
              - string
              - "null"
          guarantee:
            type:
              - string
              - "null"
            description: |
              Note that this field is referred to as *requests* by the Kubernetes API.
      image: *image-spec
      initContainers:
        type: array
        description: |
          list of initContainers to be run every singleuser pod. See [Kubernetes Docs](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/)

          ```yaml
          singleuser:
            initContainers:
              - name: init-myservice
                image: busybox:1.28
                command: ['sh', '-c', 'command1']
              - name: init-mydb
                image: busybox:1.28
                command: ['sh', '-c', 'command2']
          ```
      profileList:
        type: array
        description: |
          For more information about the profile list, see [KubeSpawner's
          documentation](https://jupyterhub-kubespawner.readthedocs.io/en/latest/spawner.html#kubespawner.KubeSpawner)
          as this is simply a passthrough to that configuration.

          **NOTE**: The image-pullers are aware of the overrides of images in
          `singleuser.profileList` but they won't be if you configure it in
          JupyterHub's configuration of '`c.KubeSpawner.profile_list`.

          ```yaml
          singleuser:
            profileList:
              - display_name: "Default: Shared, 8 CPU cores"
                description: "Your code will run on a shared machine with CPU only."
                default: True
              - display_name: "Personal, 4 CPU cores & 26GB RAM, 1 NVIDIA Tesla K80 GPU"
                description: "Your code will run a personal machine with a GPU."
                kubespawner_override:
                  extra_resource_limits:
                    nvidia.com/gpu: "1"
          ```
      schedulerStrategy:
        type:
          - string
          - "null"
        description: |
          Deprecated and no longer does anything. Use the user-scheduler instead
          in order to accomplish a good packing of the user pods.
      extraFiles: *extraFiles
      extraEnv:
        type: object
        description: |
          Extra environment variables that should be set for the user pods.

          String literals with `$(ENV_VAR_NAME)` will be expanded by Kubelet which
          is a part of Kubernetes. Note that the user pods will already have
          access to a set of environment variables that you can use, like
          `JUPYTERHUB_USER` and `JUPYTERHUB_HOST`. For more information about these
          inspect [this source
          code](https://github.com/jupyterhub/jupyterhub/blob/cc8e7806530466dce8968567d1bbd2b39a7afa26/jupyterhub/spawner.py#L763).

          ```yaml
          singleuser:
            extraEnv:
              # basic notation (for literal values only)
              MY_ENV_VARS_NAME1: "my env var value 1"

              # explicit notation (the "name" field takes precedence)
              USER_NAMESPACE:
                name: USER_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace

              # implicit notation (the "name" field is implied)
              PREFIXED_USER_NAMESPACE:
                value: "my-prefix-$(USER_NAMESPACE)"
              SECRET_VALUE:
                valueFrom:
                  secretKeyRef:
                    name: my-k8s-secret
                    key: password
          ```

          For more information, see the [Kubernetes EnvVar
          specification](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#envvar-v1-core).
      nodeSelector: *nodeSelector-spec
      extraTolerations: *tolerations-spec
      extraNodeAffinity:
        type: object
        description: |
          Affinities describe where pods prefer or require to be scheduled, they
          may prefer or require a node where they are to be scheduled to have a
          certain label (node affinity). They may also require to be scheduled
          in proximity or with a lack of proximity to another pod (pod affinity
          and anti pod affinity).

          See the [Kubernetes
          docs](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/)
          for more info.
        properties:
          required:
            type: array
            description: |
              Pass this field an array of
              [`NodeSelectorTerm`](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#nodeselectorterm-v1-core)
              objects.
          preferred:
            type: array
            description: |
              Pass this field an array of
              [`PreferredSchedulingTerm`](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#preferredschedulingterm-v1-core)
              objects.
      extraPodAffinity:
        type: object
        description: |
          See the description of `singleuser.extraNodeAffinity`.
        properties:
          required:
            type: array
            description: |
              Pass this field an array of
              [`PodAffinityTerm`](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#podaffinityterm-v1-core)
              objects.
          preferred:
            type: array
            description: |
              Pass this field an array of
              [`WeightedPodAffinityTerm`](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#weightedpodaffinityterm-v1-core)
              objects.
      extraPodAntiAffinity:
        type: object
        description: |
          See the description of `singleuser.extraNodeAffinity`.
        properties:
          required:
            type: array
            description: |
              Pass this field an array of
              [`PodAffinityTerm`](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#podaffinityterm-v1-core)
              objects.
          preferred:
            type: array
            description: |
              Pass this field an array of
              [`WeightedPodAffinityTerm`](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.19/#weightedpodaffinityterm-v1-core)
              objects.

  scheduling:
    type: object
    description: |
      Objects for customizing the scheduling of various pods on the nodes and
      related labels.
    properties:
      userScheduler:
        type: object
        description: |
          The user scheduler is making sure that user pods are scheduled
          tight on nodes, this is useful for autoscaling of user node pools.
        properties:
          enabled:
            type: boolean
            description: |
              Enables the user scheduler.
          replicas:
            type: integer
            description: |
              You can have multiple schedulers to share the workload or improve
              availability on node failure.
          image: *image-spec
          pdb: *pdb-spec
          nodeSelector: *nodeSelector-spec
          tolerations: *tolerations-spec
      podPriority:
        type: object
        description: |
          Pod Priority is used to allow real users evict placeholder pods that
          in turn triggers a scale up by a cluster autoscaler. So, enabling this
          option will only make sense if the following conditions are met:

          1. Your Kubernetes cluster has at least version 1.11
          2. A cluster autoscaler is installed
          3. user-placeholer pods is configured to get a priority equal or
             higher than the cluster autoscaler's priority cutoff
          4. Normal user pods have a higher priority than the user-placeholder
             pods

          Note that if the default priority cutoff if not configured on cluster
          autoscaler, it will currently default to 0, and that in the future
          this is meant to be lowered. If your cloud provider is installing the
          cluster autoscaler for you, they may also configure this specifically.

          Recommended settings for a cluster autoscaler...

          ... with a priority cutoff of -10 (GKE):

          ```yaml
          podPriority:
            enabled: true
            globalDefault: false
            defaultPriority: 0
            userPlaceholderPriority: -10
          ```

          ... with a priority cutoff of 0:

          ```yaml
          podPriority:
            enabled: true
            globalDefault: true
            defaultPriority: 10
            userPlaceholderPriority: 0
          ```
        properties:
          enabled:
            type: boolean
          globalDefault:
            type: boolean
            description: |
              Warning! This will influence all pods in the cluster.

              The priority a pod usually get is 0. But this can be overridden
              with a PriorityClass resource if it is declared to be the global
              default. This configuration option allows for the creation of such
              global default.
          defaultPriority:
            type: integer
            description: |
              The actual value for the default pod priority.
          userPlaceholderPriority:
            type: integer
            description: |
              The actual value for the user-placeholder pods' priority.
      userPlaceholder:
        type: object
        description: |
          User placeholders simulate users but will thanks to PodPriority be
          evicted by the cluster autoscaler if a real user shows up. In this way
          placeholders allow you to create a headroom for the real users and
          reduce the risk of a user having to wait for a node to be added. Be
          sure to use the the continuous image puller as well along with
          placeholders, so the images are also available when real users arrive.

          To test your setup efficiently, you can adjust the amount of user
          placeholders with the following command:
          ```sh
          # Configure to have 3 user placeholders
          kubectl scale sts/user-placeholder --replicas=3
          ```
        properties:
          enabled:
            type: boolean
          replicas:
            type: integer
            description: |
              How many placeholder pods would you like to have?
          resources:
            type: object
            description: |
              Unless specified here, the placeholder pods will request the same
              resources specified for the real singleuser pods.
      corePods:
        type: object
        description: |
          These settings influence the core pods like the hub, proxy and
          user-scheduler pods.
        properties:
          nodeAffinity:
            type: object
            description: |
              Where should pods be scheduled? Perhaps on nodes with a certain
              label is preferred or even required?
            properties:
              matchNodePurpose:
                type:
                  - string
                  - "null"
                enum:
                  - ignore
                  - prefer
                  - require
                description: |
                  Decide if core pods *ignore*, *prefer* or *require* to
                  schedule on nodes with this label:
                  ```
                  hub.jupyter.org/node-purpose=core
                  ```
      userPods:
        type: object
        description: |
          These settings influence the user pods like the user-placeholder,
          user-dummy and actual user pods named like jupyter-someusername.
        properties:
          nodeAffinity:
            type: object
            description: |
              Where should pods be scheduled? Perhaps on nodes with a certain
              label is preferred or even required?
            properties:
              matchNodePurpose:
                type:
                  - string
                  - "null"
                enum:
                  - ignore
                  - prefer
                  - require
                description: |
                  Decide if user pods *ignore*, *prefer* or *require* to
                  schedule on nodes with this label:
                  ```
                  hub.jupyter.org/node-purpose=user
                  ```
  ingress:
    type: object
    properties:
      enabled:
        type: boolean
        description: |
          Enable the creation of a Kubernetes Ingress to proxy-public service.

          See [Advanced Topics — Zero to JupyterHub with Kubernetes
          0.7.0 documentation](ingress)
          for more details.
      annotations:
        type: object
        description: |
          Annotations to apply to the Ingress.

          See [the Kubernetes
          documentation](https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/)
          for more details about annotations.
      hosts:
        type: array
        description: |
          List of hosts to route requests to the proxy.
      pathSuffix:
        type:
          - string
          - "null"
        description: |
          Suffix added to Ingress's routing path pattern.

          Specify `*` if your ingress matches path by glob pattern.
      tls:
        type: array
        description: |
          TLS configurations for Ingress.

          See [the Kubernetes
          documentation](https://kubernetes.io/docs/concepts/services-networking/ingress/#tls)
          for more details about annotations.

  prePuller:
    type: object
    properties:
      annotations:
        type: object
        description: |
          Annotations to apply to the hook and continous image puller pods. One example use case is to
          disable istio sidecars which could interfere with the image pulling.
      resources:
        type: object
        description: |
          These are standard Kubernetes resources with requests and limits for
          cpu and memory. They will be used on the containers in the pods
          pulling images. These should be set extremely low as the containers
          shut down directly or is a pause container that just idles.

          They were made configurable as usage of ResourceQuota may require
          containers in the namespace to have explicit resources set.
      extraTolerations: *tolerations-spec
      hook:
        description: |
          See the [*optimization
          section*](pulling-images-before-users-arrive)
          for more details.
        type: object
        properties:
          enabled:
            type: boolean
          podSchedulingWaitDuration:
            description: |
              The `hook-image-awaiter` has a criteria to await all the
              `hook-image-puller` DaemonSet's pods to both schedule and finish
              their image pulling. This flag can be used to relax this criteria
              to instead only await the pods that _has already scheduled_ to
              finish image pulling after a certain duration.

              The value of this is that sometimes the newly created
              `hook-image-puller` pods cannot be scheduled because nodes are
              full, and then it probably won't make sense to block a `helm
              upgrade`.

              An infinite duration to wait for pods to schedule can be
              represented by `-1`. This was the default behavior of version
              0.9.0 and earlier.
            type: integer
          nodeSelector: *nodeSelector-spec
          tolerations: *tolerations-spec
      continuous:
        description: |
          See the [*optimization
          section*](pulling-images-before-users-arrive)
          for more details.

          **NOTE**: If used with a Cluster Autoscaler (an autoscaling node
          pool), also add user-placeholders and enable pod priority.
        type: object
        properties:
          enabled:
            type: boolean
      pullProfileListImages:
        type: boolean
        description: |
          The singleuser.profileList configuration can let the user choose an
          image through the selection of a profile. This option determines if
          those images will be pulled, both by the hook and continuous pullers.

          The reason to disable this, is that if you have for example 10 images
          which start pulling in order from 1 to 10, a user that arrives and
          wants to start a pod with image number 10 will need to wait for all
          images to be pulled, and then it may be preferable to just let the
          user arriving wait for a single image to be pulled on arrival.
      extraImages:
        type: object
        description: |
          See the [*optimization section*](images-that-will-be-pulled) for more
          details.

          ```yaml
          prePuller:
            extraImages:
              myExtraImageIWantPulled:
                name: jupyter/all-spark-notebook
                tag: 2343e33dec46
          ```

  custom:
    type: object
    description: |
      Additional values to pass to the Hub.
      JupyterHub will not itself look at these,
      but you can read values in your own custom config via `hub.extraConfig`.
      For example:

      ```yaml
      custom:
        myHost: "https://example.horse"
      hub:
        extraConfig:
          myConfig.py: |
            c.MyAuthenticator.host = get_config("custom.myHost")
      ```
